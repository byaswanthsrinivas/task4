{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3af01ae5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1e20b5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox\n",
    "\n",
    "# Function to evaluate expressions\n",
    "def evaluate(event=None):\n",
    "    try:\n",
    "        result = str(eval(entry.get()))\n",
    "        entry.delete(0, tk.END)\n",
    "        entry.insert(tk.END, result)\n",
    "    except Exception as e:\n",
    "        messagebox.showerror(\"Error\", \"Invalid Expression\")\n",
    "\n",
    "# ac button       \n",
    "def clear():\n",
    "    entry.delete(0, tk.END)\n",
    "\n",
    "# button for x  \n",
    "def clear_one():\n",
    "    current_text = entry.get()\n",
    "    if current_text:\n",
    "        entry.delete(len(current_text) - 1)\n",
    "\n",
    "#appending char      \n",
    "def append_char(char):\n",
    "    entry.insert(tk.END, char)\n",
    "\n",
    "#initializing window\n",
    "\n",
    "root = tk.Tk()\n",
    "root.title(\"Calculator\")\n",
    "root.geometry(\"400x500\")\n",
    "root.config(bg=\"black\")\n",
    "\n",
    "\n",
    "entry = tk.Entry(root, font=(\"Arial\", 24), bd=0, bg=\"black\", fg=\"white\", insertbackground=\"white\", justify=\"right\")\n",
    "entry.grid(row=0, column=0, columnspan=4, pady=20, padx=20)\n",
    "\n",
    "# Button style\n",
    "button_style = {\n",
    "    \"font\": (\"Arial\", 18),\n",
    "    \"bd\": 0,\n",
    "    \"fg\": \"white\",\n",
    "    \"activebackground\": \"#333\",\n",
    "    \"activeforeground\": \"white\",\n",
    "    \"highlightthickness\": 1,\n",
    "    \"highlightbackground\": \"white\",\n",
    "    \"relief\": \"flat\"\n",
    "}\n",
    "\n",
    "# Special button styles\n",
    "clear_button_style = button_style.copy()\n",
    "clear_button_style[\"bg\"] = \"#1E90FF\"\n",
    "    \n",
    "equal_button_style = button_style.copy()\n",
    "equal_button_style[\"bg\"] = \"#1E90FF\"\n",
    "\n",
    "number_button_style = button_style.copy()\n",
    "number_button_style[\"bg\"] = \"black\"\n",
    "\n",
    "# Function to create buttons\n",
    "def create_button(root, text, style, command):\n",
    "    button = tk.Button(root, text=text, **style, command=command)\n",
    "    button.config(\n",
    "        height=2,\n",
    "        width=4,\n",
    "        borderwidth=2,\n",
    "        highlightthickness=1,\n",
    "        highlightbackground=\"white\",\n",
    "        relief=\"groove\"\n",
    "    )\n",
    "    return button\n",
    "\n",
    "# Button layout\n",
    "\n",
    "buttons = [\n",
    "    'AC','%','x','/',\n",
    "    '7', '8', '9', '*',\n",
    "    '4', '5', '6', '-',\n",
    "    '1', '2', '3', '+',\n",
    "    '00','0','.','='\n",
    "]\n",
    "\n",
    "\n",
    "row_val = 1\n",
    "col_val = 0\n",
    "for button in buttons:\n",
    "    if button == 'AC':\n",
    "        create_button(root, button, clear_button_style, clear).grid(row=row_val, column=col_val, sticky=\"nsew\", padx=5, pady=5)\n",
    "    elif button == 'x':\n",
    "        create_button(root, button, number_button_style, clear_one).grid(row=row_val, column=col_val, sticky=\"nsew\", padx=5, pady=5)\n",
    "    elif button == '=':\n",
    "        create_button(root, button, equal_button_style, evaluate).grid(row=row_val, column=col_val, columnspan=2, sticky=\"nsew\", padx=5, pady=5)\n",
    "        col_val += 1\n",
    "    else:\n",
    "        create_button(root, button, number_button_style, lambda char=button: append_char(char)).grid(row=row_val, column=col_val, sticky=\"nsew\", padx=5, pady=5)\n",
    "    \n",
    "    col_val += 1\n",
    "    if col_val > 3:\n",
    "        col_val = 0\n",
    "        row_val += 1\n",
    "\n",
    "for i in range(6): \n",
    "    root.grid_rowconfigure(i, weight=1)\n",
    "for i in range(4): \n",
    "    root.grid_columnconfigure(i, weight=1)\n",
    "\n",
    "root.bind('<Return>', evaluate)\n",
    "\n",
    "root.mainloop()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
